package database;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Created by Antonin ARQUEY on 15/05/17.
 */
public class UserDAO extends DAO<User> {

    public User connexion(String email, String password) throws DAOException {
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        User user = null;
        final String query = "SELECT creator_id, email, firstName, lastName, password, departement FROM Users WHERE email = ? AND password = ?";
        try{
            preparedStatement = initializePreparedStatement(query, false, email, password);
            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                user = map(resultSet);
            } else {
                throw new DAOException("Impossible de trouver cet utilisateur");
            }
        } catch (SQLException e){
            throw new DAOException(e);
        } finally {
            close(preparedStatement, resultSet);
        }
        return user;
    }
		
    @Override
    @SuppressWarnings("Duplicates")
    public User find(long id) throws DAOException {
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        User user = null;
        final String query = "SELECT * FROM Users WHERE creator_id = ?";
        try{
            preparedStatement = initializePreparedStatement(query, false, id);
            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                user = map(resultSet);
            } else {
                throw new DAOException("Impossible de trouver cet utilisateur");
            }
        } catch (SQLException e){
            throw new DAOException(e);
        } finally {
            close(preparedStatement, resultSet);
        }
        return user;
    }

    @SuppressWarnings("Duplicates")
    public User find(String email) throws DAOException {
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        User user = null;
        final String query = "SELECT creator_id, email, firstName, lastName, password, departement FROM Users WHERE email = ?";
        try{
            preparedStatement = initializePreparedStatement(query, false, email);
            resultSet = preparedStatement.executeQuery();

            if(resultSet != null && resultSet.next()) {
                user = map(resultSet);
            } else {
            throw new DAOException("Impossible de trouver cet utilisateur");
            }
        } catch (SQLException e){
            throw new DAOException(e);
        } finally {
            close(preparedStatement, resultSet);
        }
        return user;
    }

    @Override
    public User create(User obj) throws DAOException {
        PreparedStatement preparedStatement = null;
        ResultSet autoGenerated = null;
        String query = "INSERT INTO Users(email, password, firstName, lastName, departement) VALUES (?,?,?,?,?)";
        try {
            preparedStatement = initializePreparedStatement(query, false, obj.getEmail(), obj.getPassword(), obj.getFirstName(), obj.getLastName(), obj.getDepartement());
            int status = preparedStatement.executeUpdate();

            if (status == 0){
                throw new DAOException("Echec de la création de l'utilisateur");
            }
            query = "SELECT creator_id FROM Users ORDER BY creator_id DESC LIMIT 1";
            preparedStatement = null;
            preparedStatement = initializePreparedStatement(query, false);
            autoGenerated = preparedStatement.executeQuery();
            if (autoGenerated != null && autoGenerated.next()){
                obj.setId(autoGenerated.getLong("creator_id"));
            }
            else {
                throw new DAOException("Echec de la création de l'ID auto générée");
            }

        } catch (SQLException e){
            throw new DAOException(e);
        } finally {
            close(preparedStatement, autoGenerated);
        }
        return obj;
    }

    @Override
    public User update(User obj) throws DAOException {
        PreparedStatement preparedStatement = null;
        final String query = "UPDATE Users SET email = ?, password = ?, firstName = ?, lastName = ?, departement = ? WHERE creator_id = ?";

        try {
            preparedStatement = initializePreparedStatement(query, false, obj.getEmail(), obj.getPassword(), obj.getFirstName(), obj.getLastName(), obj.getDepartement(), obj.getId());
            int status = preparedStatement.executeUpdate();
            if(status == 0){
                throw new DAOException("Impossible de mettre à jour l'utilisateur");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            close(preparedStatement);
        }
        return obj;
    }

    @Override
    public void delete(User obj) throws DAOException {
        PreparedStatement preparedStatement = null;
        final String query = "DELETE FROM Users WHERE creator_id = ? LIMIT 1";

        try {
            preparedStatement = initializePreparedStatement(query, false, obj.getId());
            int status = preparedStatement.executeUpdate();
            if (status == 0){
                throw new DAOException("Impossible de supprimer cet utilisateur");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            close(preparedStatement);
        }
    }

    public User map(ResultSet res) throws SQLException{
        User user = new User(res.getLong("creator_id"));
        user.setEmail(res.getString("email"));
        user.setPassword(res.getString("password"));
        user.setFirstName(res.getString("firstName"));
        user.setLastName(res.getString("lastName"));
        user.setDepartement(res.getString("departement"));
        return user;
    }
}
