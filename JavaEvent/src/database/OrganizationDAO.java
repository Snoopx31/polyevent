package database;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashSet;

/**
 * Created by Antonin ARQUEY on 27/05/17.
 */
public class OrganizationDAO extends DAO<Organization> {
    @Override
    public Organization find(long id) throws DAOException {
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Organization organization;
        final String query = "SELECT * FROM Oragnization WHERE creator_id = ?";

        try {
            preparedStatement = initializePreparedStatement(query, false, id);
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()){
                organization = map(resultSet);
            } else {
                throw new DAOException("Impossible de trouver cette organisation");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            close(preparedStatement, resultSet);
        }
        return organization;
    }

    @Override
    public Organization create(Organization obj) throws DAOException {
        PreparedStatement preparedStatement = null;
        ResultSet autoGenerated = null;
        String query = "INSERT INTO Organization(name, leader) VALUES (?,?)";
        try {
            preparedStatement = initializePreparedStatement(query, false, obj.getName(), obj.getLeader().getId());
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Impossible de créer cette organisation");
            }

            query = "SELECT creator_id FROM Organization ORDER BY creator_id DESC LIMIT 1";
            preparedStatement = null;
            preparedStatement = initializePreparedStatement(query, false);
            autoGenerated = preparedStatement.executeQuery();
            if (autoGenerated != null && autoGenerated.next()) {
                obj.setId(autoGenerated.getLong("creator_id"));
            } else {
                throw new DAOException("Echec de la récupération de l'id auto-generée");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            close(preparedStatement, autoGenerated);
        }
        return obj;
    }

    @Override
    public Organization update(Organization obj) throws DAOException {
        PreparedStatement preparedStatement = null;
        final String query = "UPDATE Organization SET name = ?, leader = ? WHERE creator_id = ?";
        try {
            preparedStatement = initializePreparedStatement(query, false, obj.getName(), obj.getLeader().getId(), obj.getId());
            int status = preparedStatement.executeUpdate();
            if (status == 0) {
                throw new DAOException("Impossible de mettre a jour cette organisation !");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            close(preparedStatement);
        }
        return obj;
    }

    @Override
    public void delete(Organization obj) throws DAOException {
        PreparedStatement preparedStatement = null;
        final String query = "DELETE FROM Organization WHERE creator_id = ?";

        try {
            preparedStatement = initializePreparedStatement(query, false, obj.getId());
            int status = preparedStatement.executeUpdate();
            if (status == 0) {
                throw new DAOException("Impossible de supprimer cet évenement");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            close(preparedStatement);
        }
    }

    public void addMember(Organization organization, User user) {
        PreparedStatement preparedStatement = null;
        final String query = "INSERT INTO Members(user, organization) VALUES (?,?)";
        try {
            preparedStatement = initializePreparedStatement(query, false, user.getId(), organization.getId());
            int status  = preparedStatement.executeUpdate();
            if (status == 0) {
                throw  new DAOException("Impossible d'ajouter ce membre");
            } else {
                organization.addMember(user);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            close(preparedStatement);
        }
    }

    public void removeMember(Organization organization, User user) {
        PreparedStatement preparedStatement = null;
        final String query = "DELETE FROM Members WHERE organization = ?  AND user = ? LIMIT 1";
        try {
            preparedStatement = initializePreparedStatement(query, false, organization.getId(), user.getId());
            int status  = preparedStatement.executeUpdate();
            if (status == 0) {
                throw  new DAOException("Impossible de supprimer ce membre");
            } else {
                organization.removeMember(user);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            close(preparedStatement);
        }
    }

    protected Organization map(ResultSet res) throws SQLException{
        UserDAO userDAO = new UserDAO();
        User leader = userDAO.find(res.getLong("leader"));
        long id = res.getLong("creator_id");
        String name = res.getString("name");
        HashSet<User> members = getMembers(id);
        return new Organization(id, name, leader, members);
    }

    protected HashSet<User> getMembers(long id) throws SQLException{
        HashSet<User> members = new HashSet<>();
        UserDAO userDAO = new UserDAO();
        PreparedStatement preparedStatement = null;
        ResultSet result = null;
        final String query = "SELECT creator_id, email, password, firstName, lastName, departement FROM User, Organization, Members WHERE Members.user = User.creator_id AND Members.organization = ?";
        try {
            preparedStatement = initializePreparedStatement(query, false, id);
            result = preparedStatement.executeQuery();
            while (result.next()){
                members.add(userDAO.map(result));
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            close(preparedStatement, result);
        }

        return members;
    }
}
